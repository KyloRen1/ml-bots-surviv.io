# selenium: !conda install -c conda-forge selenium -y
from selenium.webdriver import Chrome, ChromeOptions #, Firefox, FirefoxOptions
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver import ActionChains

from enum import Enum
import json
import time


class Key(Enum):
	W = "w"
	A = "a"
	S = "s"
	D = "d"
	F = "f" # –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã F —á–µ—Ä–µ–∑ keyDown
	R = "r"
	V = "v"
	N1 = "1"
	N2 = "2"
	N3 = "3"
	N7 = "7"
	N8 = "8"
	N9 = "9"
	N0 = "0"

	def __str__(self):
		return self.value

	@staticmethod
	def fromDirection(id_dir):
		"""Direction schema
		Args:
			direction ([int]): stop0; ü°π1; ü°Ω2; ü°∫3; ü°æ4; ü°ª5; ü°ø6; ü¢Ä7; ü°º8;
		Returns:
			[Key]: array of key enum
		"""
		d_dir = {0: [],
				 1: [Key.W],
				 2: [Key.W, Key.D],
				 3: [Key.D],
				 4: [Key.D, Key.S],
				 5: [Key.S],
				 6: [Key.A, Key.S],
				 7: [Key.A],
				 8: [Key.A, Key.W]}
		
		return d_dir[id_dir]


class Direction(Enum):
	Up = "keyUp"
	Down = "rawKeyDown"

	def __str__(self):
		return self.value

class Game:
	def __init__(self, chrome_driver, chrome_adblock, custom_config=True, classic_mode=True):
		self.game_url ='https://surviv.io/'
		#https://chromedriver.chromium.org/downloads
		#self.chrome_driver = '/home/laggg/RL_surviv/control_architecture/control_scripts_lib/support_files_for_selenium/chromedriver'
		self.chrome_driver = chrome_driver
		#https://www.crx4chrome.com/crx/31931/
		#self.chrome_adblock = '/home/laggg/RL_surviv/control_architecture/control_scripts_lib/support_files_for_selenium/uBlockOrigin.crx' 
		self.chrome_adblock = chrome_adblock
		chrOptions = ChromeOptions()
		chrOptions.add_extension(self.chrome_adblock)
		chrOptions.add_argument("disable-infobars")
		chrOptions.add_argument("--mute-audio")
		self.browser = Chrome(executable_path=self.chrome_driver, chrome_options=chrOptions)
		self.browser.set_window_position(x=-10,y=0)
		self.browser.get(self.game_url)
		self.browser.implicitly_wait(3)
		self.browser.maximize_window()
		#–¥–ª—è –ø–æ–∏—Å–∫–∞ id –∫–Ω–æ–ø–æ–∫ –Ω—É–∂–Ω–æ ctrl+shift+I 
		try:
			self.browser.find_element_by_xpath("/html/body/div[9]/div[34]/div[1]/div[1]/span").click()
		except:
			print('Not found')
		#self.browser.find_element_by_id("modal-account-incentive-btn").click()
		try:
			self.browser.find_element_by_xpath("/html/body/div[9]/div[29]/div/div[1]/span").click()
		except:
			print('Not found')
		try:
			self.browser.find_element_by_xpath("/html/body/div[9]/div[40]/div/div[1]/span").click()
		except:
			print('Not found')
		try:
			self.browser.find_element_by_xpath("/html/body/div[9]/div[18]/div/div[1]/span").click()
		except:
			print('Not found')
		if classic_mode:     # –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã (–µ—Å–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ —Å—Ç–æ–∏—Ç –¥—Ä—É–≥–æ–π)
			self.browser.find_element_by_id("index-play-mode-selected").click()
			self.browser.find_element_by_xpath(\
			"/html/body/div[9]/div[19]/div[12]/div[2]/div[4]/div[3]/div[3]/div[1]/div[3]/div/div[1]").click()
			
		  
		self.callCounters = {}  # call counter for each key
		self.previousDirection = 0  # pvious dirrection for caching optimization
									# and for easier cancelling last movement direction
		
	def close_current_tab(self):
		self.browser.close()

	def get_window_size(self):
		dim = self.browser.get_window_size()
		position = self.browser.get_window_position()
		position['y'] += dim['height'] - self.browser.find_element_by_tag_name('body').size['height']
		dim['height'] = self.browser.find_element_by_tag_name('body').size['height']
		return position, dim

	# –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞ –æ–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–µ–ª–µ–Ω–∏—É–º, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –∫–ª–∞—Å—Å–µ Game,
	# –ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞ –∏ —Å—Ä–µ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –∫–ª–∞—Å—Å–µ Game,
	# –∫–æ—Ç–æ—Ä—ã–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∞–≥–µ–Ω—Ç–∞
	# (–∞–≥–µ–Ω—Ç - –∫–ª–∞—Å—Å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç - –∫–ª–∞—Å—Å Game).
	
	def start_playing(self):
		self.browser.find_element_by_id("btn-start-battle").click()
		#self.browser.find_element_by_xpath("/html/body/div[6]/div/div[1]/span").click()
		
	def restart_after_death(self):
		#–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É # –≤–∑—è—Ç–æ –æ—Ç—Å—é–¥–∞ https://habr.com/en/post/250975/
		try:
			print('–ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å –µ—â–µ"')
			self.browser.find_element_by_xpath('/html/body/div[3]/div[4]/div[2]/div[1]/div[3]/a').click()
			print('–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –µ—â–µ"')
		except:
			print('–Ω–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É "–ò–≥—Ä–∞—Ç—å –µ—â–µ"')
			pass
		try:
			print('–ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–∑–∞–∫—Ä—ã—Ç—å –ª–∏—à–Ω–µ–µ –æ–∫–Ω–æ"')
			self.browser.find_element_by_xpath("/html/body/div[4]/div[28]/div/div[1]/span").click()
			print('–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–∑–∞–∫—Ä—ã—Ç—å –ª–∏—à–Ω–µ–µ –æ–∫–Ω–æ"')
		except:
			print('–Ω–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É "–∑–∞–∫—Ä—ã—Ç—å –ª–∏—à–Ω–µ–µ –æ–∫–Ω–æ"')
			pass
		try:
			print('–ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–í –±–æ–π"')
			self.start_playing()
			print('–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–í –±–æ–π"')
		except:
			print('–Ω–µ –Ω–∞—à–µ–ª –∫–Ω–æ–ø–∫—É "–í –±–æ–π"')
			pass
		
	 
		
#    def get_crashed(self):
#    def get_score(self):
#    def get_highscore(self):
	
	#==================================================================================================
	#================ü°ª LOCOMOTION ACTIONS ü°ª==========================================================
	
	# NOTE: Why not just use ActionChains.key_up(...)/key_down(...) !?
	# for keys like WASD, up, down etc. it is not possible to click and push them via ActionChains
	def _dispatchKeyEvent(self, name, options={}):
		options["type"] = name
		body = json.dumps({"cmd": "Input.dispatchKeyEvent", "params": options})
		resource = "/session/%s/chromium/send_command" % self.browser.session_id
		url = self.browser.command_executor._url + resource
		self.browser.command_executor._request("POST", url, body)

	def _holdKey(self, directStr, keyStr):
		options = {
			"code": "Key" + keyStr.upper(),  # Uppercase is required
			"key": keyStr.upper(),
			"text": keyStr.upper(),
			"unmodifiedText": keyStr.upper(),
			"nativeVirtualKeyCode": ord(keyStr.upper()),
			"windowsVirtualKeyCode": ord(keyStr.upper())
		}
		self._dispatchKeyEvent(directStr, options)
		
	def keyDown(self, key):
		self._holdKey(str(Direction.Down), str(key))
		
	def keyUp(self, key):
		self._holdKey(str(Direction.Up), str(key))
	
	def stop_moving(self):
		# –æ—Ç–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã —Ä–∞–Ω–µ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∏)
		self.keyUp(Key.A)
		self.keyUp(Key.S)
		self.keyUp(Key.D)
		self.keyUp(Key.W)
		
	def move(self, keys):
		self.stop_moving()
		for key in keys:
			self.keyDown(key) # –∑–∞–∂–∏–º–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è, –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Å–ø–∏—Å–∫–µ
			
	#================ü°π LOCOMOTION ACTIONS ü°π==========================================================
	#==================================================================================================
	
	def _createActionWithMoveTo(self, x, y):
		'''
		–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∞—á–∞—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è, –∑–∞–∂–∞—Ç—å –õ–ö–ú –∏ –Ω–∞–∂–∞—Ç—å –¥–æ–ø –∫–ª–∞–≤–∏—à—É)
		'''
		# action
		# https://stackoverflow.com/questions/32167577/how-to-move-the-mouse-in-selenium
		# https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains
		action = ActionChains(self.browser)
		#element = self.browser.find_element_by_id("game-touch-area")
		#size = element.size
		#centerBias = {"x": int(size["width"] / 2),
		#              "y": int(size["height"] / 2)}
		# -y because html axis "y" is inverted
		#return action.move_to_element_with_offset(
		#    element, centerBias["x"] + int(x), centerBias["y"] + int(-y))
		return action    #.move_by_offset(0,0)
		# –í–°–Ø –ü–†–û–ë–õ–ï–ú–ê –í –º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –§–£–ù–ö–¶–ò–ò move_to_element_with_offset/move_by_offset
	#==================================================================================================
	#================ü°ª   MOUSE ACTIONS   ü°ª==========================================================
	
	def moveMouseTo(self, x, y):
		"""Move mouse relatively screen center
		Args:
			x ([int]): x axis
			y ([int]): y axis
		"""
		actions = self._createActionWithMoveTo(x, y)
		actions.perform()
	
	#================ü°π   MOUSE ACTIONS    ü°π==========================================================
	#==================================================================================================
	#==================================================================================================
	#================ü°ª ADDITIONAL BUTTONS ü°ª==========================================================
	
	def press(self, key): # F, R, N7, N8, N9, N0, N1, N2, N3
		self.keyDown(key)
		time.sleep(0.001)
		self.keyUp(key)
	
	# V - –°–≤–µ—Ä–Ω—É—Ç—å –º–∏–Ω–∏–∫–∞—Ä—Ç—É
	
	#================ü°π ADDITIONAL BUTTONS ü°π==========================================================
	#==================================================================================================
	#==================================================================================================
	#================ü°ª PROCESS AGENT'S ACTIONS ü°ª=====================================================
	
	def keySwitch(self, key):
		keyStr = str(key)
		self.callCounters[keyStr] = self.callCounters.get(keyStr, 0) + 1
		if self.callCounters[keyStr] % 2 != 0:
			self.keyDown(key)
		else:
			self.keyUp(key)
			
	def _switchDirection(self, direction):
		keys = Key.fromDirection(direction)
		for key in keys:
			self.keySwitch(key)
					
	def process_all_agents_actions(self, request):
		""" Process request by surviv processor
			Args:
				request ([SurvivRequest]): Special class for managing surviv.io game
		"""
		# —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–µ—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ–≥–æ request'a
		if request.fKey == 1:
			self.press(Key.F)
		if request.actKey == 5: #–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞
			self.press(Key.R)
		elif request.actKey == 3: #—Å–æ–¥–∞
			self.press(Key.N9)          
		elif request.actKey == 4: #—Ç–∞–±–ª–µ—Ç–∫–∏
			self.press(Key.N0)  
		elif request.actKey == 1: #–±–∏–Ω—Ç—ã
			self.press(Key.N7) 
		elif request.actKey == 2: #–∞–ø—Ç–µ—á–∫–∞
			self.press(Key.N8)
			
		if request.click == 1:
			action = ActionChains(self.browser)
			action.click_and_hold()
			action.perform()
		
		if request.switch_weap == 1: #–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ä—É–∂–∏–µ 1
			self.press(Key.N1)
		elif request.switch_weap == 2: #–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ä—É–∂–∏–µ 2
			self.press(Key.N2)          
		elif request.switch_weap == 3: #–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –æ—Ä—É–∂–∏–µ 3
			self.press(Key.N3)

		if self.previousDirection != request.direction:
			self._switchDirection(self.previousDirection)
			self._switchDirection(request.direction)
			self.previousDirection = request.direction
			
		if request.click == 1:
			time.sleep(request.dt_click/1000)  #–¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç—Ä–µ–ª—å–±—ã
			post_act = ActionChains(self.browser) #–ø–æ–¥–Ω–∏–º–∞–µ–º –õ–ö–ú
			post_act.release()
			post_act.perform()
		
	#================ü°π PROCESS AGENT'S ACTIONS ü°π=====================================================
	#==================================================================================================